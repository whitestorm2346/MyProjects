Character
    pair<int, int> position
    char name
    int speed
    virtual void move() = 0
    virtual bool checkCollide()

Monster: Character -> 'M'
    Distance* toPlayer
    void move() // always moving

Player: Character -> 'P'
    void move() // UI control

Obstacle -> '*'
    pair<int, int> size
    pair<int, int> position
    void setSize(size)
    void setPosition(position)

Field -> 2D array
    pair<int, int> size
    List<Obstacle*>* obstacles
    char** matrix -> public
    void setSize(size)
    void addObstacle()
    void generate()
    void print()

Distance -> 2D array
    pair<int, int> position
    Field* field
    int** distance
    void setField(field*)
    void countDistance() -> BFS

Timer
    clock_t checkPoint
    double timeGap
    void resetTimer()
    void setTimeGap(timeGap)
    bool exceedTimeGap()

Node<Type> -> template
    Type data
    Node<Type>* prev
    Node<Type>* next

List<Type> -> template
    Node<Type>* front
    Node<Type>* back
    int nodeCount
    void insert(node)
    void erase()
    bool empty()
    int  size()
    Node<Type>* getFront()
    Node<Type>* getBack()

UserInterface
    void action()

Game
    pair<int, int> size
    Field* field
    List<Type>* characters
    UserInterface* control
    void run() -> main loop

OutputControl
    void gotoxy(x, y)
    void hideCursor()
    void setFontColor(color)
    void setBackgroundColor(color)

main()
  Game game
  game.run()
